spring:
  data:
    mongodb:
      uri: ${MONGODB_URI}
    web:
      pageable:
        size-parameter: size
        page-parameter: page
        default-page-size: ${SIZE}
        max-page-size: 100
      sort:
        sort-parameter: sort
  kafka:
    listener:
      type: batch
      ack-mode: manual_immediate
      missing-topics-fatal: false
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    topic:
      replication-factor: ${KAFKA_REPLICATION_FACTOR}
      num-partitions: ${KAFKA_NUM_PARTITIONS}
    producer:
      acks: all
      retries: 100
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL}
        specific.avro.reader: true
      template:
        default-topic: test
    consumer:
      enable-auto-commit: false
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        request:
          timeout:
            ms: 120000
        schema.registry.url: ${SCHEMA_REGISTRY_URL}
        specific.avro.reader: true
      max-poll-records: 300
      fetch-max-wait: 10000 # 10s
      fetch-min-size: 50000000 #50mb
      group-id: "loyalty-service"
#  aop:
#    proxy-target-class: true
#  main:
#    allow-bean-definition-overriding: true
debug: ${DEBUG}
server:
  port: ${PORT}
  error:
    include-stacktrace: on_trace_param
black-list: ${BLACK_LIST}
facebook-info-url: ${FACEBOOK_URL}
google-info-url: ${GOOGLE_URL}

jwt:
  secret: ${JWT_SECRET}
  token-expire-time: ${JWT_TOKEN_EXPIRE_TIME}
  token-refresh-expire-time: ${JWT_TOKEN_REFRESH_EXPIRE_TIME}
wiinvent:
  account:
    service:
      domain: ${WIINVENT_ACCOUNT_SERVICE_DOMAIN}
phone:
  card:
    login: ${PHONE_CARD_LOGIN}
    get-code: ${PHONE_CARD_GET_CODE}
    username: ${PHONE_CARD_USERNAME}
    password: ${PHONE_CARD_PASSWORD}


